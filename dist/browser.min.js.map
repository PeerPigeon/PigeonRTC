{
  "version": 3,
  "sources": ["../src/index.js", "../src/RTCAdapter.js", "../src/BrowserRTCAdapter.js", "../src/NodeRTCAdapter.js", "../src/PigeonRTC.js"],
  "sourcesContent": ["/**\n * PigeonRTC - Pluggable cross-browser compatible WebRTC library\n * \n * A lightweight, pluggable WebRTC library that provides a consistent API\n * across different environments (browser and Node.js) with support for\n * custom adapters.\n * \n * @module pigeonrtc\n */\n\nexport { PigeonRTC, createPigeonRTC } from './PigeonRTC.js';\nexport { RTCAdapter } from './RTCAdapter.js';\nexport { BrowserRTCAdapter } from './BrowserRTCAdapter.js';\nexport { NodeRTCAdapter } from './NodeRTCAdapter.js';\n\n// Default export for convenience\nimport { createPigeonRTC } from './PigeonRTC.js';\nexport default createPigeonRTC;\n", "/**\n * Base RTCAdapter interface that all WebRTC adapters must implement.\n * This provides a consistent API regardless of the underlying WebRTC implementation.\n */\nexport class RTCAdapter {\n  /**\n   * Get the RTCPeerConnection class for this adapter\n   * @returns {typeof RTCPeerConnection} The RTCPeerConnection class\n   */\n  getRTCPeerConnection() {\n    throw new Error('getRTCPeerConnection must be implemented by adapter');\n  }\n\n  /**\n   * Get the RTCSessionDescription class for this adapter\n   * @returns {typeof RTCSessionDescription} The RTCSessionDescription class\n   */\n  getRTCSessionDescription() {\n    throw new Error('getRTCSessionDescription must be implemented by adapter');\n  }\n\n  /**\n   * Get the RTCIceCandidate class for this adapter\n   * @returns {typeof RTCIceCandidate} The RTCIceCandidate class\n   */\n  getRTCIceCandidate() {\n    throw new Error('getRTCIceCandidate must be implemented by adapter');\n  }\n\n  /**\n   * Get the MediaStream class for this adapter (if supported)\n   * @returns {typeof MediaStream|null} The MediaStream class or null if not supported\n   */\n  getMediaStream() {\n    return null;\n  }\n\n  /**\n   * Check if this adapter supports the current environment\n   * @returns {boolean} True if the adapter can work in the current environment\n   */\n  isSupported() {\n    throw new Error('isSupported must be implemented by adapter');\n  }\n\n  /**\n   * Get the name of this adapter\n   * @returns {string} The adapter name\n   */\n  getName() {\n    throw new Error('getName must be implemented by adapter');\n  }\n\n  /**\n   * Initialize the adapter (for any setup that needs to happen)\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    // Default implementation does nothing\n  }\n\n  /**\n   * Get user media (if supported)\n   * @param {MediaStreamConstraints} _constraints\n   * @returns {Promise<MediaStream>}\n   */\n  async getUserMedia(_constraints) {\n    throw new Error('getUserMedia not supported by this adapter');\n  }\n\n  /**\n   * Get display media (if supported)\n   * @param {MediaStreamConstraints} _constraints\n   * @returns {Promise<MediaStream>}\n   */\n  async getDisplayMedia(_constraints) {\n    throw new Error('getDisplayMedia not supported by this adapter');\n  }\n}\n", "import { RTCAdapter } from './RTCAdapter.js';\n\n/**\n * Browser-native WebRTC adapter for use in web browsers.\n * This adapter uses the browser's native WebRTC implementation.\n */\nexport class BrowserRTCAdapter extends RTCAdapter {\n  constructor() {\n    super();\n    this._checkSupport();\n  }\n\n  _checkSupport() {\n    // Check if we're in a browser environment\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return;\n    }\n\n    // Browser environment - check for WebRTC support\n    this.hasRTCPeerConnection = !!(\n      window.RTCPeerConnection ||\n      window.webkitRTCPeerConnection ||\n      window.mozRTCPeerConnection\n    );\n\n    this.hasGetUserMedia = !!(\n      navigator.mediaDevices?.getUserMedia ||\n      navigator.getUserMedia ||\n      navigator.webkitGetUserMedia ||\n      navigator.mozGetUserMedia\n    );\n\n    this.hasGetDisplayMedia = !!(\n      navigator.mediaDevices?.getDisplayMedia\n    );\n  }\n\n  getRTCPeerConnection() {\n    if (typeof window === 'undefined') {\n      throw new Error('BrowserRTCAdapter requires a browser environment');\n    }\n\n    return window.RTCPeerConnection ||\n           window.webkitRTCPeerConnection ||\n           window.mozRTCPeerConnection;\n  }\n\n  getRTCSessionDescription() {\n    if (typeof window === 'undefined') {\n      throw new Error('BrowserRTCAdapter requires a browser environment');\n    }\n\n    return window.RTCSessionDescription ||\n           window.mozRTCSessionDescription;\n  }\n\n  getRTCIceCandidate() {\n    if (typeof window === 'undefined') {\n      throw new Error('BrowserRTCAdapter requires a browser environment');\n    }\n\n    return window.RTCIceCandidate ||\n           window.mozRTCIceCandidate;\n  }\n\n  getMediaStream() {\n    if (typeof window === 'undefined') {\n      return null;\n    }\n\n    return window.MediaStream || window.webkitMediaStream;\n  }\n\n  isSupported() {\n    return typeof window !== 'undefined' && this.hasRTCPeerConnection;\n  }\n\n  getName() {\n    return 'BrowserRTCAdapter';\n  }\n\n  async getUserMedia(constraints) {\n    if (typeof navigator === 'undefined') {\n      throw new Error('getUserMedia requires a browser environment');\n    }\n\n    // Modern API\n    if (navigator.mediaDevices?.getUserMedia) {\n      return await navigator.mediaDevices.getUserMedia(constraints);\n    }\n\n    // Legacy API with Promise wrapper\n    const getUserMedia = navigator.getUserMedia ||\n                        navigator.webkitGetUserMedia ||\n                        navigator.mozGetUserMedia;\n\n    if (!getUserMedia) {\n      throw new Error('getUserMedia is not supported in this browser');\n    }\n\n    return new Promise((resolve, reject) => {\n      getUserMedia.call(navigator, constraints, resolve, reject);\n    });\n  }\n\n  async getDisplayMedia(constraints) {\n    if (typeof navigator === 'undefined') {\n      throw new Error('getDisplayMedia requires a browser environment');\n    }\n\n    if (!navigator.mediaDevices?.getDisplayMedia) {\n      throw new Error('getDisplayMedia is not supported in this browser');\n    }\n\n    return await navigator.mediaDevices.getDisplayMedia(constraints);\n  }\n}\n", "import { RTCAdapter } from './RTCAdapter.js';\n\n/**\n * Node.js WebRTC adapter using @koush/wrtc package.\n * This adapter provides WebRTC functionality in Node.js environments.\n */\nexport class NodeRTCAdapter extends RTCAdapter {\n  constructor() {\n    super();\n    this._wrtc = null;\n    this._initialized = false;\n  }\n\n  async initialize() {\n    if (this._initialized) {\n      return;\n    }\n\n    try {\n      // Dynamically import @koush/wrtc (it's an optional peer dependency)\n      const wrtc = await import('@koush/wrtc');\n      this._wrtc = wrtc;\n      this._initialized = true;\n    } catch (error) {\n      throw new Error(\n        'NodeRTCAdapter requires @koush/wrtc to be installed. ' +\n        'Install it with: npm install @koush/wrtc'\n      );\n    }\n  }\n\n  _ensureInitialized() {\n    if (!this._initialized || !this._wrtc) {\n      throw new Error(\n        'NodeRTCAdapter not initialized. Call initialize() first.'\n      );\n    }\n  }\n\n  getRTCPeerConnection() {\n    this._ensureInitialized();\n    return this._wrtc.RTCPeerConnection;\n  }\n\n  getRTCSessionDescription() {\n    this._ensureInitialized();\n    return this._wrtc.RTCSessionDescription;\n  }\n\n  getRTCIceCandidate() {\n    this._ensureInitialized();\n    return this._wrtc.RTCIceCandidate;\n  }\n\n  getMediaStream() {\n    this._ensureInitialized();\n    return this._wrtc.MediaStream || null;\n  }\n\n  isSupported() {\n    // Check if we're in a Node.js environment (not browser)\n    return typeof process !== 'undefined' &&\n           process.versions != null &&\n           process.versions.node != null &&\n           typeof window === 'undefined';\n  }\n\n  getName() {\n    return 'NodeRTCAdapter';\n  }\n\n  async getUserMedia(_constraints) {\n    // Node.js doesn't typically support getUserMedia\n    // This would require additional hardware access libraries\n    throw new Error('getUserMedia is not supported in Node.js environment');\n  }\n\n  async getDisplayMedia(_constraints) {\n    // Node.js doesn't support getDisplayMedia\n    throw new Error('getDisplayMedia is not supported in Node.js environment');\n  }\n}\n", "import { BrowserRTCAdapter } from './BrowserRTCAdapter.js';\nimport { NodeRTCAdapter } from './NodeRTCAdapter.js';\n\n/**\n * Main PigeonRTC class that provides a unified interface for WebRTC\n * across different environments with pluggable adapter support.\n */\nexport class PigeonRTC {\n  constructor(options = {}) {\n    this.adapter = options.adapter || null;\n    this.initialized = false;\n  }\n\n  /**\n   * Initialize PigeonRTC with automatic adapter detection or custom adapter\n   * @param {Object} options - Configuration options\n   * @param {RTCAdapter} options.adapter - Custom adapter to use (optional)\n   * @param {boolean} options.preferNode - Prefer Node adapter even in browser (for testing)\n   * @returns {Promise<void>}\n   */\n  async initialize(options = {}) {\n    if (this.initialized) {\n      return;\n    }\n\n    // Use custom adapter if provided\n    if (options.adapter) {\n      this.adapter = options.adapter;\n    }\n\n    // Auto-detect adapter if not provided\n    if (!this.adapter) {\n      this.adapter = await this._detectAdapter(options);\n    }\n\n    // Initialize the adapter\n    await this.adapter.initialize();\n    this.initialized = true;\n  }\n\n  /**\n   * Automatically detect and create the appropriate adapter for the current environment\n   * @private\n   */\n  async _detectAdapter(options = {}) {\n    // Try Node adapter first if we're in Node.js and preferNode is true or no browser support\n    if (options.preferNode || (typeof window === 'undefined' && typeof process !== 'undefined')) {\n      const nodeAdapter = new NodeRTCAdapter();\n      if (nodeAdapter.isSupported()) {\n        try {\n          await nodeAdapter.initialize();\n          return nodeAdapter;\n        } catch (error) {\n          // If Node adapter fails, fall through to browser adapter (might be in a hybrid environment)\n          console.warn('Node adapter initialization failed, trying browser adapter:', error.message);\n        }\n      }\n    }\n\n    // Try browser adapter\n    const browserAdapter = new BrowserRTCAdapter();\n    if (browserAdapter.isSupported()) {\n      return browserAdapter;\n    }\n\n    // No supported adapter found\n    throw new Error(\n      'No supported WebRTC adapter found. ' +\n      'Make sure you are running in a browser with WebRTC support or have @koush/wrtc installed for Node.js.'\n    );\n  }\n\n  /**\n   * Ensure PigeonRTC is initialized before use\n   * @private\n   */\n  _ensureInitialized() {\n    if (!this.initialized || !this.adapter) {\n      throw new Error('PigeonRTC not initialized. Call initialize() first.');\n    }\n  }\n\n  /**\n   * Get the RTCPeerConnection class\n   * @returns {typeof RTCPeerConnection}\n   */\n  getRTCPeerConnection() {\n    this._ensureInitialized();\n    return this.adapter.getRTCPeerConnection();\n  }\n\n  /**\n   * Get the RTCSessionDescription class\n   * @returns {typeof RTCSessionDescription}\n   */\n  getRTCSessionDescription() {\n    this._ensureInitialized();\n    return this.adapter.getRTCSessionDescription();\n  }\n\n  /**\n   * Get the RTCIceCandidate class\n   * @returns {typeof RTCIceCandidate}\n   */\n  getRTCIceCandidate() {\n    this._ensureInitialized();\n    return this.adapter.getRTCIceCandidate();\n  }\n\n  /**\n   * Get the MediaStream class (if supported)\n   * @returns {typeof MediaStream|null}\n   */\n  getMediaStream() {\n    this._ensureInitialized();\n    return this.adapter.getMediaStream();\n  }\n\n  /**\n   * Create a new RTCPeerConnection with the given configuration\n   * @param {RTCConfiguration} config - RTCPeerConnection configuration\n   * @returns {RTCPeerConnection}\n   */\n  createPeerConnection(config) {\n    this._ensureInitialized();\n    const RTCPeerConnection = this.adapter.getRTCPeerConnection();\n    return new RTCPeerConnection(config);\n  }\n\n  /**\n   * Create a new RTCSessionDescription\n   * @param {RTCSessionDescriptionInit} init - Session description initialization\n   * @returns {RTCSessionDescription}\n   */\n  createSessionDescription(init) {\n    this._ensureInitialized();\n    const RTCSessionDescription = this.adapter.getRTCSessionDescription();\n    return new RTCSessionDescription(init);\n  }\n\n  /**\n   * Create a new RTCIceCandidate\n   * @param {RTCIceCandidateInit} init - ICE candidate initialization\n   * @returns {RTCIceCandidate}\n   */\n  createIceCandidate(init) {\n    this._ensureInitialized();\n    const RTCIceCandidate = this.adapter.getRTCIceCandidate();\n    return new RTCIceCandidate(init);\n  }\n\n  /**\n   * Get user media stream (camera/microphone)\n   * @param {MediaStreamConstraints} constraints\n   * @returns {Promise<MediaStream>}\n   */\n  async getUserMedia(constraints) {\n    this._ensureInitialized();\n    return await this.adapter.getUserMedia(constraints);\n  }\n\n  /**\n   * Get display media stream (screen sharing)\n   * @param {MediaStreamConstraints} constraints\n   * @returns {Promise<MediaStream>}\n   */\n  async getDisplayMedia(constraints) {\n    this._ensureInitialized();\n    return await this.adapter.getDisplayMedia(constraints);\n  }\n\n  /**\n   * Check if WebRTC is supported in the current environment\n   * @returns {boolean}\n   */\n  isSupported() {\n    return this.adapter ? this.adapter.isSupported() : false;\n  }\n\n  /**\n   * Get the name of the current adapter\n   * @returns {string}\n   */\n  getAdapterName() {\n    return this.adapter ? this.adapter.getName() : 'None';\n  }\n}\n\n/**\n * Create and initialize a PigeonRTC instance\n * @param {Object} options - Configuration options\n * @returns {Promise<PigeonRTC>}\n */\nexport async function createPigeonRTC(options = {}) {\n  const rtc = new PigeonRTC(options);\n  await rtc.initialize(options);\n  return rtc;\n}\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "BrowserRTCAdapter", "NodeRTCAdapter", "PigeonRTC", "RTCAdapter", "createPigeonRTC", "index_default", "RTCAdapter", "_constraints", "BrowserRTCAdapter", "RTCAdapter", "constraints", "getUserMedia", "resolve", "reject", "NodeRTCAdapter", "RTCAdapter", "wrtc", "_constraints", "PigeonRTC", "options", "nodeAdapter", "NodeRTCAdapter", "error", "browserAdapter", "BrowserRTCAdapter", "config", "RTCPeerConnection", "init", "RTCSessionDescription", "RTCIceCandidate", "constraints", "createPigeonRTC", "rtc", "index_default", "createPigeonRTC"]
}
