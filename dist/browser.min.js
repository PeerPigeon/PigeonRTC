var PigeonRTC=(()=>{var u=Object.create;var p=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var l=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var m=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(e,i)=>(typeof require<"u"?require:e)[i]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+t+'" is not supported')});var f=(t,e)=>{for(var i in e)p(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let r of l(e))!g.call(t,r)&&r!==i&&p(t,r,{get:()=>e[r],enumerable:!(n=h(e,r))||n.enumerable});return t};var R=(t,e,i)=>(i=t!=null?u(C(t)):{},c(e||!t||!t.__esModule?p(i,"default",{value:t,enumerable:!0}):i,t)),T=t=>c(p({},"__esModule",{value:!0}),t);var M={};f(M,{BrowserRTCAdapter:()=>o,NodeRTCAdapter:()=>s,PigeonRTC:()=>d,RTCAdapter:()=>a,createPigeonRTC:()=>w,default:()=>y});var a=class{getRTCPeerConnection(){throw new Error("getRTCPeerConnection must be implemented by adapter")}getRTCSessionDescription(){throw new Error("getRTCSessionDescription must be implemented by adapter")}getRTCIceCandidate(){throw new Error("getRTCIceCandidate must be implemented by adapter")}getMediaStream(){return null}isSupported(){throw new Error("isSupported must be implemented by adapter")}getName(){throw new Error("getName must be implemented by adapter")}async initialize(){}async getUserMedia(e){throw new Error("getUserMedia not supported by this adapter")}async getDisplayMedia(e){throw new Error("getDisplayMedia not supported by this adapter")}};var o=class extends a{constructor(){super(),this._checkSupport()}_checkSupport(){typeof window>"u"||typeof navigator>"u"||(this.hasRTCPeerConnection=!!(window.RTCPeerConnection||window.webkitRTCPeerConnection||window.mozRTCPeerConnection),this.hasGetUserMedia=!!(navigator.mediaDevices?.getUserMedia||navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia),this.hasGetDisplayMedia=!!navigator.mediaDevices?.getDisplayMedia)}getRTCPeerConnection(){if(typeof window>"u")throw new Error("BrowserRTCAdapter requires a browser environment");return window.RTCPeerConnection||window.webkitRTCPeerConnection||window.mozRTCPeerConnection}getRTCSessionDescription(){if(typeof window>"u")throw new Error("BrowserRTCAdapter requires a browser environment");return window.RTCSessionDescription||window.mozRTCSessionDescription}getRTCIceCandidate(){if(typeof window>"u")throw new Error("BrowserRTCAdapter requires a browser environment");return window.RTCIceCandidate||window.mozRTCIceCandidate}getMediaStream(){return typeof window>"u"?null:window.MediaStream||window.webkitMediaStream}isSupported(){return typeof window<"u"&&this.hasRTCPeerConnection}getName(){return"BrowserRTCAdapter"}async getUserMedia(e){if(typeof navigator>"u")throw new Error("getUserMedia requires a browser environment");if(navigator.mediaDevices?.getUserMedia)return await navigator.mediaDevices.getUserMedia(e);let i=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia;if(!i)throw new Error("getUserMedia is not supported in this browser");return new Promise((n,r)=>{i.call(navigator,e,n,r)})}async getDisplayMedia(e){if(typeof navigator>"u")throw new Error("getDisplayMedia requires a browser environment");if(!navigator.mediaDevices?.getDisplayMedia)throw new Error("getDisplayMedia is not supported in this browser");return await navigator.mediaDevices.getDisplayMedia(e)}};var s=class extends a{constructor(){super(),this._wrtc=null,this._initialized=!1}async initialize(){if(!this._initialized)try{let e=await import("@koush/wrtc");this._wrtc=e,this._initialized=!0}catch{throw new Error("NodeRTCAdapter requires @koush/wrtc to be installed. Install it with: npm install @koush/wrtc")}}_ensureInitialized(){if(!this._initialized||!this._wrtc)throw new Error("NodeRTCAdapter not initialized. Call initialize() first.")}getRTCPeerConnection(){return this._ensureInitialized(),this._wrtc.RTCPeerConnection}getRTCSessionDescription(){return this._ensureInitialized(),this._wrtc.RTCSessionDescription}getRTCIceCandidate(){return this._ensureInitialized(),this._wrtc.RTCIceCandidate}getMediaStream(){return this._ensureInitialized(),this._wrtc.MediaStream||null}isSupported(){return typeof process<"u"&&process.versions!=null&&process.versions.node!=null&&typeof window>"u"}getName(){return"NodeRTCAdapter"}async getUserMedia(e){throw new Error("getUserMedia is not supported in Node.js environment")}async getDisplayMedia(e){throw new Error("getDisplayMedia is not supported in Node.js environment")}};var d=class{constructor(e={}){this.adapter=e.adapter||null,this.initialized=!1}async initialize(e={}){this.initialized||(e.adapter&&(this.adapter=e.adapter),this.adapter||(this.adapter=await this._detectAdapter(e)),await this.adapter.initialize(),this.initialized=!0)}async _detectAdapter(e={}){if(e.preferNode||typeof window>"u"&&typeof process<"u"){let n=new s;if(n.isSupported())try{return await n.initialize(),n}catch(r){console.warn("Node adapter initialization failed, trying browser adapter:",r.message)}}let i=new o;if(i.isSupported())return i;throw new Error("No supported WebRTC adapter found. Make sure you are running in a browser with WebRTC support or have @koush/wrtc installed for Node.js.")}_ensureInitialized(){if(!this.initialized||!this.adapter)throw new Error("PigeonRTC not initialized. Call initialize() first.")}getRTCPeerConnection(){return this._ensureInitialized(),this.adapter.getRTCPeerConnection()}getRTCSessionDescription(){return this._ensureInitialized(),this.adapter.getRTCSessionDescription()}getRTCIceCandidate(){return this._ensureInitialized(),this.adapter.getRTCIceCandidate()}getMediaStream(){return this._ensureInitialized(),this.adapter.getMediaStream()}createPeerConnection(e){this._ensureInitialized();let i=this.adapter.getRTCPeerConnection();return new i(e)}createSessionDescription(e){this._ensureInitialized();let i=this.adapter.getRTCSessionDescription();return new i(e)}createIceCandidate(e){this._ensureInitialized();let i=this.adapter.getRTCIceCandidate();return new i(e)}async getUserMedia(e){return this._ensureInitialized(),await this.adapter.getUserMedia(e)}async getDisplayMedia(e){return this._ensureInitialized(),await this.adapter.getDisplayMedia(e)}isSupported(){return this.adapter?this.adapter.isSupported():!1}getAdapterName(){return this.adapter?this.adapter.getName():"None"}};async function w(t={}){let e=new d(t);return await e.initialize(t),e}var y=w;return T(M);})();
//# sourceMappingURL=browser.min.js.map
